# -*- snakemake -*-

import yaml
import itertools

samples = [
    'treated1',
    'treated2',
    #'treated3',
    'untreated1',
    'untreated2',
    #'untreated3',
    #'untreated4'
]

patterns = [
    'pasilla/{sample}/{sample}_R1.fastqc.html',
    'pasilla/{sample}/{sample}_R1.cutadapt.fastqc.html',
    'pasilla/{sample}/{sample}_R1.cutadapt.fastq.gz',
    'multiqc_report.html',
]
supplied = {'sample': samples}

# Fill in each pattern with each item in "supplied", resulting in a list of
# lists. Collapse that into a list of strings, and then unique them into a set
# since e.g. expand('a', samples=[1, 2, 3, 4]) results in ['a', 'a', 'a', 'a']
targets = list(
    set(
        itertools.chain(
            *map(lambda x: expand(x, **supplied), patterns)
        )
    )
)

HERE = srcdir('')

# relative to the directory of the current snakefile.
WRAPPERS = '../wrappers'


def wrapper_for(tool):
    """
    Returns the wrapper directory for the specified tool
    """
    return os.path.join(HERE, WRAPPERS, tool)


rule all:
    input: targets

rule clean:
    run:
        for t in targets:
            if os.path.exists(t):
                shell("rm -r {t}")


rule fastqc:
    input: 'pasilla/{sample}/{sample}{suffix}.fastq.gz'
    output:
        html='pasilla/{sample}/{sample}{suffix}.fastqc.html',
        zip='pasilla/{sample}/{sample}{suffix}_fastqc.zip',
    wrapper:
        wrapper_for('fastqc')


rule cutadapt:
    input: 'pasilla/{sample}/{sample}_R1.fastq.gz'
    output: 'pasilla/{sample}/{sample}_R1.cutadapt.fastq.gz'
    log: 'pasilla/{sample}/{sample}_R1.cutadapt.fastq.log'
    params:
        extra=(
            "-a file:adapters.fa "
            "--quality-cutoff 20 "
            "--minimum-length 25 "
            "--overlap 10 ")
    wrapper:
        wrapper_for('cutadapt')


rule multiqc:
    input: filter(lambda x: 'fastq' in x, targets)
    output: 'multiqc_report.html'
    log: 'multiqc_report.log'
    params: analysis_directory='pasilla'
    wrapper:
        wrapper_for('multiqc')

# vim: ft=python
